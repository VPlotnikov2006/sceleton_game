#ifndef __VBOT__
#define __VBOT__

//{=====================================================================================================================
///    \author Плотников Владимир
///
///    \file   character.h
///
///    \defgroup    Drawing     Рисование
///    \defgroup    File     Работа с файлами
///    \defgroup    Movment     Движение
//}=====================================================================================================================

typedef class Bot bot_t;

//Bot
//{=====================================================================================================================
///     \name   Класс бота
class Bot
{
private:
    /// <= Координата по оси X середины картинки персоонажа на холсте
    double xpos;
    /// <= Координата по оси Y середины картинки персоонажа на холсте
    double ypos;
    /// <= Размер одного кадра по оси X
    double xsize;
    /// <= Размер одного кадра по оси Y
    double ysize;
    /// <= Дискриптор холста картинки
    HDC picture;
    /// <= Направление движения персонажа
    int direction;
    /// <= Номер кадра анимации персонажа
    int frame;
    /// <= Размер
    double scale;
    /// <= Длина одного шага
    int step;
    /// <= Кол-во кадров в анимации движения
    int framesn;
    /// <= имя картинки в котором лежит персонаж (sceleton) с типом
    char* name;

    void move_up();
    //{=====================================================================================================================
    ///     \name       Движение вврех
    ///
    ///     \ingroup    Movment
    ///
    ///     \brief      Двигает персонажа в направлении вверх
    //}=====================================================================================================================

    void move_left();
    //{=====================================================================================================================
    ///     \name       Движение влево
    ///
    ///     \ingroup    Movment
    ///
    ///     \brief      Двигает персонажа в направлении влево
    //}=====================================================================================================================

    void move_down();
    //{=====================================================================================================================
    ///     \name       Движение вниз
    ///
    ///     \ingroup    Movment
    ///
    ///     \brief      Двигает персонажа в направлении вниз
    //}=====================================================================================================================

    void move_right();
    //{=====================================================================================================================
    ///     \name       Движение вправо
    ///
    ///     \ingroup    Movment
    ///
    ///     \brief      Двигает персонажа в направлении вправо
    //}=====================================================================================================================

    bool load_image();
    //{=====================================================================================================================
    ///     \name       Грузит картинку
    ///
    ///     \ingroup    File
    ///
    ///     \brief      Грузит картинку из файла name + ".bmp"
    ///
    ///     \warning    Если такого файла нет то - Undefined Behavior
    ///
    ///     \return     True если удачная загрузка, False если нет такого файла
    //}=====================================================================================================================


public:
     Bot(int x, int y, int d)://{
          xpos(x),
          ypos(y),
          xsize(48),
          ysize(48),
          picture(nullptr),
          direction(d),
          frame(1),
          scale(1),
          step(5),
          framesn(1),
          name("ghost.bmp")//}
    {
        load_image();
    }

    Bot()://{
          xpos(0),
          ypos(0),
          xsize(48),
          ysize(48),
          picture(nullptr),
          direction(1),
          frame(1),
          scale(1),
          step(5),
          framesn(1),
          name("ghost.bmp")//}
    {
        load_image();
    }
    ~Bot()
    {
        txDeleteDC(picture);
    }
    Bot(const Bot &b)://{
                    xpos(b.xpos),
                    ypos(b.ypos),
                    xsize(b.xsize),
                    ysize(b.ysize),
                    picture(nullptr),
                    direction(b.direction),
                    frame(b.frame),
                    scale(b.scale),
                    step(b.step),
                    framesn(b.framesn),
                    name(b.name)//}
    {
        load_image();
    }
    Bot& operator=(Bot b)
    {
        xpos = b.xpos;
        ypos = b.ypos;
        xsize = b.xsize;
        ysize = b.ysize;
        picture = nullptr;
        direction = b.direction;
        frame = b.frame;
        scale = b.scale;
        step = b.step;
        framesn = b.framesn;
        name = b.name;
        load_image();
        return *this;
    }
    void delete_image()
    {
        txDeleteDC(picture);
    }
    void setx(int x)
    {
        xpos = x;
    }
    void sety(int y)
    {
        ypos = y;
    }
    void setd(int d)
    {
        direction = d;
    }
    bool move_forward();
    //{=====================================================================================================================
    ///     \name       Движение вперед
    ///
    ///     \ingroup    Movment
    ///
    ///     \brief      Двигает персонажа в направлениикуда он смотрит
    ///
    ///     \return     True если персонаж на экране, иначе False
    //}=====================================================================================================================

    void swich_direction();
    //{=====================================================================================================================
    ///     \name       Смена направления
    ///
    ///     \ingroup    Movment
    ///
    ///     \brief      С вероятностью 0.25 меняет направление персонажа
    //}=====================================================================================================================

    void draw();
    //{=====================================================================================================================
    ///     \name       Рисует
    ///
    ///     \ingroup    Drawing
    ///
    ///     \brief      Рисует бота
    //}=====================================================================================================================

};
//}=====================================================================================================================

//Initialization
//Bot
//{=====================================================================================================================
bool Bot::move_forward()
{
    frame = frame%framesn + 1;
    if (direction == 1)
        move_up();
    if (direction == 2)
        move_left();
    if (direction == 3)
        move_down();
    if (direction == 4)
        move_right();
    if (ypos - ysize > 720 || ypos + ysize < 0 || xpos - xsize > 1080 || xpos + xsize < 0)
        return 0;
    return 1;
}
void Bot::move_up()
{
    ypos -= step * scale;
}
void Bot::move_left()
{
    xpos -= step * scale;
}
void Bot::move_down()
{
    ypos += step * scale;
}
void Bot::move_right()
{
    xpos += step * scale;
}

void Bot::swich_direction()
{
    int b = rand() % 12;
    if (1 <= b && b <= 4)
        direction = b;
}

void Bot::draw()
{
    Win32::TransparentBlt(txDC(),
                          int(xpos - scale * xsize / 2),
                          int(ypos - scale * ysize / 2),
                          int(xsize * scale),
                          int(ysize * scale),
                          picture,
                          int((frame - 1) * xsize),
                          int((direction - 1) * ysize),
                          int(xsize),
                          int(ysize),
                          RGB(254,254,255));
}

bool Bot::load_image()
{
    picture = txLoadImage(name);
    if (!picture)
    {
        txMessageBox("Ошибка","Не найден файл с персонажем");
        return 0;
    }
    return 1;
}
//}=====================================================================================================================
#endif
